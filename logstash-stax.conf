input {
  udp {
    port => 5000
    codec => "json"
    type => "logspout"
  }

  tcp {
    port => 5004
    codec => "json_lines"
    type => "systemd"
  }
  
  tcp {
    port => 5200
    codec => "json"
    type => "service"
  }
}

filter {
  if [message] =~ /^\s*{.*}\s*$/ {
    json { source => "message" }
  }

  if [type] == "logspout" {
    mutate { rename => [ "docker.name", "container.name"]}
    mutate { rename => [ "docker.id", "container.id"]}
    mutate { rename => [ "docker.image", "container.image"]}
    mutate { remove_field => [ "docker.hostname", "host"]}
  }

  if [type] == "service" {
    mutate { rename => [ "level", "severity" ] }
    mutate { remove_field => [ "HOSTNAME", "host"]}
  }

  if [type] == "systemd" {
    mutate { rename => [ "MESSAGE", "message" ] }
    mutate { rename => [ "_HOSTNAME", "hostname" ] }
    mutate { gsub => [ "__REALTIME_TIMESTAMP", ".{3}$", "" ] }
    date {  match => [ "__REALTIME_TIMESTAMP", "UNIX_MS" ] }
    syslog_pri { syslog_pri_field_name => "PRIORITY" }
    mutate { rename => [ "syslog_severity", "severity"]}
    mutate { remove_field => [ "syslog_facility", "syslog_facility_code", "syslog_severity_code" ]}
  }
}

output {
  # Send output to standard output device/interface
  stdout {
    codec => rubydebug
  }

  # Parse failed messages to separate index
  if "_grokparsefailure" in [tags] or "_jsonparsefailure" in [tags] {
    elasticsearch {
    # host => ["localhost:9200"]
      host => ["ES_CONN_STR"]
      index => "parse-err-%{+YYYY.MM.dd}"
      protocol  => "http"
    }
  }

# Elasticsearch output
  elasticsearch {
  # host => ["localhost:9200"]
    host => ["ES_CONN_STR"]
    index => "logstash-%{+YYYY.MM.dd}"
    protocol  => "http"
  }
}
